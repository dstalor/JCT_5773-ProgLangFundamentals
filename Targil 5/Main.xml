<class>
|
<keyword> class </keyword>
<identifier> Main </identifier>
<symbol> { </symbol>
<subroutineDec>
+--"<identifier> value </identifier>"|"<keyword> int </keyword>"|"var"|1
"<identifier> result </identifier>"|"<keyword> int </keyword>"|"var"|0
+--" this"|"<identifier> Main </identifier>"|"argument"|0
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> main </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> result </identifier>
<symbol> , </symbol>
<identifier> value </identifier>
<symbol> ; </symbol>
</varDec>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Main </identifier>
<symbol> . </symbol>
<identifier> fillMemory </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
push constant 8001
</expression>
<symbol> , </symbol>
<expression>
push constant 16
</expression>
<symbol> , </symbol>
<expression>
<term>
push constant 1
neg
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<identifier> value </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> peek </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
push constant 8000
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Main </identifier>
<symbol> . </symbol>
<identifier> convert </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> value </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
   +--"<identifier> value </identifier>"|"<keyword> int </keyword>"|"argument"|1
+--"<identifier> position </identifier>"|"<keyword> int </keyword>"|"var"|2
|  +--|
"<identifier> mask </identifier>"|"<keyword> int </keyword>"|"var"|1
|  +--|
+--"<identifier> loop </identifier>"|"<keyword> boolean </keyword>"|"var"|0
   +--" this"|"<identifier> Main </identifier>"|"argument"|0
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> convert </identifier>
<symbol> ( </symbol>
<parameterList>
<keyword> int </keyword>
<identifier> value </identifier>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> mask </identifier>
<symbol> , </symbol>
<identifier> position </identifier>
<symbol> ; </symbol>
</varDec>
<varDec>
<keyword> var </keyword>
<keyword> boolean </keyword>
<identifier> loop </identifier>
<symbol> ; </symbol>
</varDec>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> loop </identifier>
<symbol> = </symbol>
<expression>
<term>
<keyword> true </keyword>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> loop </identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> position </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> position </identifier>
</term>
push constant 1
add
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> mask </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> Main </identifier>
<symbol> . </symbol>
<identifier> nextMask </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> mask </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> poke </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
push constant 9000
<term>
<identifier> position </identifier>
</term>
add
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> mask </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> position </identifier>
</term>
push constant 16
<symbol> &gt; </symbol>
</expression>
<symbol> ) </symbol>
</term>
neg
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> value </identifier>
</term>
<term>
<identifier> mask </identifier>
</term>
<symbol> &amp; </symbol>
</expression>
<symbol> ) </symbol>
</term>
push constant 0
<symbol> = </symbol>
</expression>
<symbol> ) </symbol>
</term>
neg
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> poke </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
push constant 8000
<term>
<identifier> position </identifier>
</term>
add
</expression>
<symbol> , </symbol>
<expression>
push constant 1
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> poke </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
push constant 8000
<term>
<identifier> position </identifier>
</term>
add
</expression>
<symbol> , </symbol>
<expression>
push constant 0
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> loop </identifier>
<symbol> = </symbol>
<expression>
<term>
<keyword> false </keyword>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
+--"<identifier> mask </identifier>"|"<keyword> int </keyword>"|"argument"|1
" this"|"<identifier> Main </identifier>"|"argument"|0
+--|
<keyword> function </keyword>
<keyword> int </keyword>
<identifier> nextMask </identifier>
<symbol> ( </symbol>
<parameterList>
<keyword> int </keyword>
<identifier> mask </identifier>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> mask </identifier>
</term>
push constant 0
<symbol> = </symbol>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<returnStatement>
<keyword> return </keyword>
<expression>
push constant 1
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<identifier> mask </identifier>
</term>
push constant 2
<symbol> * </symbol>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
   +--"<identifier> value </identifier>"|"<keyword> int </keyword>"|"argument"|3
+--"<identifier> startAddress </identifier>"|"<keyword> int </keyword>"|"argument"|2
|  +--|
"<identifier> length </identifier>"|"<keyword> int </keyword>"|"argument"|1
+--" this"|"<identifier> Main </identifier>"|"argument"|0
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> fillMemory </identifier>
<symbol> ( </symbol>
<parameterList>
<keyword> int </keyword>
<identifier> startAddress </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> length </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> value </identifier>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> length </identifier>
</term>
push constant 0
<symbol> &gt; </symbol>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> poke </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> startAddress </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> value </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<identifier> length </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> length </identifier>
</term>
push constant 1
sub
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> startAddress </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> startAddress </identifier>
</term>
push constant 1
add
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<symbol> } </symbol>
</class>
