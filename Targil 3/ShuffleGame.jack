class ShuffleGame {
    // The square
    field Square square;
	// graphical board
	field Board board;
	field Array positions;
	field String instr1;
	field String instr2;
	field String instr3;
	field String instr4;
	field String instr5;
	
    /** Constructs a new Square Game. */
    constructor ShuffleGame new() {
		var int i;
		let board = Board.new(255,255);
		let square = Square.new(191,191,62);

		let instr1 = "Instructions:";
		let instr2 = "Use [Up], [Down], [Left],";
		let instr3 = "and [Right] to navigate.";
		let instr4 = "Try to get all the boxes in";
		let instr5 = "numerical order.";

		
		
		let i=0;
		let positions = Array.new(16);
		while(i<16) {
			let positions[i] = (i+1);
			let i = (i+1);
		}
		
		do randomize();
		do printPositions();
		do board.drawBoard();

        return this;
    }

	/* check if the game is complete */
	method boolean isOver() {
		var int i;
		var boolean result;
		let i = 0;
		let result = true;
		while(i<16) {
			if (~(positions[i] = (i+1))) {
				let result = false;
			}
			let i=i+1;
		}
		return result;
	}
	/* do the swap operation between 2 case */
	method void swap(int a, int b) { 							// a = 1, b = 3
		let positions[a] = ((positions[a]) + (positions[b]));	// a = 1+3 = 4
		let positions[b] = ((positions[a]) - (positions[b]));	// b = 4-3 = 1
		let positions[a] = ((positions[a]) - (positions[b]));	// a = 4-1 = 3
		return;
	}															// b = 1, a = 3
	
	/*print the position and recreate the board for all move  */
	method void printPositions() {
		var int i;
		var int row;
		var int col;
		var int cursorX;
		var int cursorY;
		do Screen.clearScreen();
		let i = 0;
		let col = 0;
		let row = 0;
		while(i<16) {
			let cursorX = ((col * 8) + 3);
			let cursorY = ((row * 6) + 2);
			do Output.moveCursor(cursorY,cursorX);
			do Output.printInt(positions[i]);
			
			let i = i+1;
			let row = (i / 4);
			let col = (i - (row * 4));
		}
		do board.drawBoard();
		do square.draw();
		do Output.moveCursor(0,32);
		do Output.printString(instr1);
		do Output.moveCursor(2,32);
		do Output.printString(instr2);
		do Output.moveCursor(3,32);
		do Output.printString(instr3);
		do Output.moveCursor(5,32);
		do Output.printString(instr4);
		do Output.moveCursor(6,32);
		do Output.printString(instr5);
		return;
	}
	//up action by reduce the place by 4 because is a board with 4 case width
	method void up() {
		var int origPos;
		let origPos = (square.getPosition());
		if (origPos > 3) {
			do swap(origPos, (origPos - 4));
			do square.moveUp();
			do printPositions();
			if (isOver()){
				do congratulations();
			}
		}
		return;
	}
	//mouvement action
	method void down() {
		var int origPos;
		let origPos = square.getPosition();
		if (origPos < 12) {
			do swap(origPos, (origPos + 4));
			do square.moveDown();
			do printPositions();
			if (isOver()){
				do congratulations();
			}
		}
		return;
	}
		//mouvement action
	method void left() {
		var int origPos;
		let origPos = square.getPosition();
		if ((origPos - ((origPos / 4) * 4)) > 0) {
			do swap(origPos, (origPos - 1));
			do square.moveLeft();
			do printPositions();
			if (isOver()){
				do congratulations();
			}
		}
		return;
	}
		//mouvement action
	method void right() {
		var int origPos;
		let origPos = square.getPosition();
		if ((origPos - ((origPos / 4) * 4)) < 3) {
			do swap(origPos, (origPos + 1));
			do square.moveRight();
			do printPositions();
			if (isOver()){
				do congratulations();
			}
		}
		return;
	}
    /** Deallocates the object's memory. */
    method void dispose() {
        do square.dispose();
        do board.dispose();
		do postions.dispose();
        do Memory.deAlloc(this);
        return;
    }
//that the run function we call from the main.vm,
//they receive the key pressed by the user and react 
    method void run() {
        var char key;
        var boolean exit;

        let exit = false;

        while (~exit) {
            // waits for a key to be pressed.
            while (key = 0) {
                let key = Keyboard.keyPressed();
            }

            if (key = 81) {
                let exit = true;
            }
            if (key = 131) {
                do up();
            }
            if (key = 133) {
                do down();
            }
            if (key = 130) {
                do left();
            }
            if (key = 132) {
                do right();
            }

            // waits for the key to be released.
            while (~(key = 0)) {
                let key = Keyboard.keyPressed();
            }
        }
        return;
	}
	//to randomize the board with 100 random mouvement
	method void randomize() {
		var int i;
		var int r;
		var int pos;
		let i = 0;
		let pos = 15;
		while (i < 100) {
			let r = (LCGRandom.randRange(0,3));
			if (r = 0) {
				if (pos > 3) {
					do swap(pos, (pos - 4));
					let pos = (pos - 4);
					do square.moveUp();
				}
			}
			else {
				if (r = 1) {
					if (pos < 12) {
						do swap(pos, (pos + 4));
						let pos = (pos + 4);
						do square.moveDown();
					}
				}
				else {
					if (r = 2) {
						if ((pos - ((pos / 4) * 4)) > 0) {
							do swap(pos, (pos - 1));
							let pos = (pos - 1);
							do square.moveLeft();
						}
					}
					else {
						if (r = 3) {
							if ((pos - ((pos / 4) * 4)) < 3) {
								do swap(pos, (pos + 1));
								let pos = (pos + 1);
								do square.moveRight();
							}
						}
					}
				}
			}
			do Screen.clearScreen();
			let i = (i+1);
		}
		return;
	}
	//congratulations msg after we check the isover() 
	method void congratulations() {
		do Output.moveCursor(0,32);
		do Output.printString("             ");
		do Output.moveCursor(2,32);
		do Output.printString("                         ");
		do Output.moveCursor(3,32);
		do Output.printString("                        ");
		do Output.moveCursor(5,32);
		do Output.printString("                           ");
		do Output.moveCursor(6,32);
		do Output.printString("                ");
		do Output.moveCursor(1,36);
		do Output.printString("Congratulations! You won!");
		return;
	}
}
