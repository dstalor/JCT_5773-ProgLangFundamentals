class ShuffleGame {
    // The square
    field Square square;
	// graphical board
	field Board board;
	field Array positions;
	
    /** Constructs a new Square Game. */
    constructor ShuffleGame new() {
		var int i;
		let board = Board.new(255,255);
		let square = Square.new(191,191,63);

		let i=0;
		let positions = Array.new(16);
		while(i<16) {
			let positions[i] = (i+1);
			let i = (i+1);
		}
		do printPositions();
		do board.drawBoard();

        return this;
    }

	
	method boolean isOver() {
		var int i;
		var boolean result;
		let i = 0;
		let result = true;
		while(i<16) {
			if (~(positions[i] = (i+1))) {
				let result = false;
			}
			let i=i+1;
		}
		return result;
	}
	
	method void swap(int a, int b) { 							// a = 1, b = 3
		let positions[a] = ((positions[a]) + (positions[b]));	// a = 1+3 = 4
		let positions[b] = ((positions[a]) - (positions[b]));	// b = 4-3 = 1
		let positions[a] = ((positions[a]) - (positions[b]));	// a = 4-1 = 3
		return;
	}															// b = 1, a = 3
	
	method void printPositions() {
		var int i;
		var int row;
		var int col;
		var int cursorX;
		var int cursorY;
		let i = 0;
		let col = 0;
		let row = 0;
		while(i<16) {
			let cursorX = ((col * 8) + 3);
			let cursorY = ((row * 6) + 2);
			do Output.moveCursor(cursorY,(cursorX - 2));
			do Output.printString("         ");
			do Output.moveCursor(cursorY,cursorX);
			do Output.printInt(positions[i]);
			
			let i = i+1;
			let row = (i / 4);
			let col = (i - (row * 4));
		}

		do square.draw();
		return;
	}
	method void up() {
		var int origPos;
		let origPos = (square.getPosition());
		if (origPos > 3) {
			do swap(origPos, (origPos - 4));
			do square.moveUp();
			if (~(isOver())) {
				do printPositions();
				do board.drawBoard();
			}
		}
		return;
	}
	
	method void down() {
		var int origPos;
		let origPos = square.getPosition();
		if (origPos < 12) {
			do swap(origPos, (origPos + 4));
			do square.moveDown();
			if (~(isOver())) {
				do printPositions();
				do board.drawBoard();
			}
		}
		return;
	}
	
	method void left() {
		var int origPos;
		let origPos = square.getPosition();
		if ((origPos - ((origPos / 4) * 4)) > 0) {
			do swap(origPos, (origPos - 1));
			do square.moveLeft();
			if (~(isOver())) {
				do printPositions();
				do board.drawBoard();
			}
		}
		return;
	}
	
	method void right() {
		var int origPos;
		let origPos = square.getPosition();
		if ((origPos - ((origPos / 4) * 4)) < 3) {
			do swap(origPos, (origPos + 1));
			do square.moveRight();
			if (~(isOver())) {
				do printPositions();
				do board.drawBoard();
			}
		}
		return;
	}
    /** Deallocates the object's memory. */
    method void dispose() {
        do square.dispose();
        do board.dispose();
        do Memory.deAlloc(this);
        return;
    }
    method void run() {
        var char key;
        var boolean exit;

        let exit = false;

        while (~exit) {
            // waits for a key to be pressed.
            while (key = 0) {
                let key = Keyboard.keyPressed();
            }

            if (key = 81) {
                let exit = true;
            }
            if (key = 131) {
                do up();
            }
            if (key = 133) {
                do down();
            }
            if (key = 130) {
                do left();
            }
            if (key = 132) {
                do right();
            }

            // waits for the key to be released.
            while (~(key = 0)) {
                let key = Keyboard.keyPressed();
            }
        }
        return;
	}

}